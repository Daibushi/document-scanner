/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package richtercloud.document.scanner.gui;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JScrollPane;
import richtercloud.document.scanner.gui.conf.DocumentScannerConf;
import richtercloud.document.scanner.gui.conf.FieldOrderPanel;
import richtercloud.reflection.form.builder.ClassInfo;
import richtercloud.validation.tools.FieldRetriever;

/**
 * A dialog which allows to enforce instantiation of component values based on
 * values of a {@link DocumentScannerConf}. You have to display the dialog with
 *
 * @author richter
 */
/*
internal implementation notes:
- since the dialog is modal an needs to be closed with either the save or
discard button it's unnecessary to listen to value changes of components because
they can be retrieved when returning the new configuration instance
*/
public class DocumentScannerConfDialog extends javax.swing.JDialog {
    private static final long serialVersionUID = 1L;
    private DocumentScannerConf documentScannerConf;
    private final Map<Class<?>, List<Field>> fieldOrderMap;

    /**
     * Creates new form DocumentScannerOptionsDialog
     *
     * @param parent
     * @param documentScannerConf a reference to a {@link DocumentScannerConf}
     * to be updated when values of components change
     */
    public DocumentScannerConfDialog(java.awt.Frame parent,
            DocumentScannerConf documentScannerConf,
            Set<Class<?>> entityClasses,
            FieldRetriever fieldRetriever) {
        super(parent,
                true //always modal
        );
        this.documentScannerConf = documentScannerConf;
        initComponents();
        this.autoGenerateIDsCheckBox.setSelected(documentScannerConf.isAutoGenerateIDs());
        this.autoSaveImageDataCheckBox.setSelected(documentScannerConf.isAutoSaveImageData());
        this.autoSaveOCRDataCheckBox.setSelected(documentScannerConf.isAutoSaveOCRData());
        this.autoOCRValueDetectionCheckBox.setSelected(documentScannerConf.isAutoOCRValueDetection());
        this.rememberTrimWhitespaceCheckBox.setSelected(documentScannerConf.isRememberTrimWhitespace());
        assert documentScannerConf.getFieldOrderMap() != null;
        if(documentScannerConf.getFieldOrderMap() == null) {
            fieldOrderMap = new HashMap<>();
            for(Class<?> entityClass : entityClasses) {
                List<Field> classFields = fieldRetriever.retrieveRelevantFields(entityClass);
                fieldOrderMap.put(entityClass,
                        classFields);
            }
        }else {
            assert documentScannerConf.getFieldOrderMap().keySet().equals(entityClasses);
            fieldOrderMap = new HashMap<>(documentScannerConf.getFieldOrderMap());
        }
        List<Class<?>> fieldOrderMapKeys = new LinkedList<>(fieldOrderMap.keySet());
        fieldOrderMapKeys.sort((Class<?> o1, Class<?> o2) -> {
            ClassInfo o1ClassInfo = o1.getAnnotation(ClassInfo.class);
            ClassInfo o2ClassInfo = o2.getAnnotation(ClassInfo.class);
            if(o1ClassInfo != null && o2ClassInfo != null) {
                return o1ClassInfo.name().compareTo(o2ClassInfo.name());
            }else {
                return o1.getSimpleName().compareTo(o2.getSimpleName());
            }
        });
        for(Class<?> entityClass : fieldOrderMapKeys) {
            FieldOrderPanel fieldOrderPanel = new FieldOrderPanel(fieldOrderMap.get(entityClass));
            JScrollPane fieldOrderPanelScrollPane = new JScrollPane(fieldOrderPanel);
            String title;
            ClassInfo entityClassInfo = entityClass.getAnnotation(ClassInfo.class);
            if(entityClassInfo != null) {
                title = entityClassInfo.name();
            }else {
                title = entityClass.getSimpleName();
            }
            fieldOrderTabbedPane.add(title, //title
                    fieldOrderPanelScrollPane);
        }
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        autoGenerateIDsCheckBox = new javax.swing.JCheckBox();
        saveButton = new javax.swing.JButton();
        discardButton = new javax.swing.JButton();
        autoSaveImageDataCheckBox = new javax.swing.JCheckBox();
        autoSaveOCRDataCheckBox = new javax.swing.JCheckBox();
        autoOCRValueDetectionCheckBox = new javax.swing.JCheckBox();
        rememberTrimWhitespaceCheckBox = new javax.swing.JCheckBox();
        fieldOrderSeparator = new javax.swing.JSeparator();
        fieldOrderTabbedPane = new javax.swing.JTabbedPane();
        fieldOrderTabbedPaneLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        autoGenerateIDsCheckBox.setText("Automatically generate IDs at saving");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        discardButton.setText("Discard");
        discardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardButtonActionPerformed(evt);
            }
        });

        autoSaveImageDataCheckBox.setText("Automatically generate image data");

        autoSaveOCRDataCheckBox.setText("Automatically generate OCR data");

        autoOCRValueDetectionCheckBox.setText("Automatically detect OCR values (might be slow)");

        rememberTrimWhitespaceCheckBox.setText("Remember trim whitespace option in OCR copy text area");

        fieldOrderTabbedPaneLabel.setText("Field order:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldOrderTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(autoGenerateIDsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(discardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveButton))
                    .addComponent(autoSaveImageDataCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(autoSaveOCRDataCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fieldOrderSeparator)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(autoOCRValueDetectionCheckBox)
                            .addComponent(rememberTrimWhitespaceCheckBox)
                            .addComponent(fieldOrderTabbedPaneLabel))
                        .addGap(0, 306, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(autoGenerateIDsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoSaveImageDataCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoSaveOCRDataCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoOCRValueDetectionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rememberTrimWhitespaceCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldOrderSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldOrderTabbedPaneLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldOrderTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(discardButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("PMD.UnusedFormalParameter")
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        this.documentScannerConf.setAutoGenerateIDs(this.autoGenerateIDsCheckBox.isSelected());
        this.documentScannerConf.setAutoSaveImageData(this.autoSaveImageDataCheckBox.isSelected());
        this.documentScannerConf.setAutoSaveOCRData(this.autoSaveOCRDataCheckBox.isSelected());
        this.documentScannerConf.setAutoOCRValueDetection(this.autoOCRValueDetectionCheckBox.isSelected());
        this.documentScannerConf.setRememberTrimWhitespace(this.rememberTrimWhitespaceCheckBox.isSelected());
        this.documentScannerConf.setFieldOrderMap(this.fieldOrderMap);
        this.setVisible(false);
    }//GEN-LAST:event_saveButtonActionPerformed

    @SuppressWarnings("PMD.UnusedFormalParameter")
    private void discardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_discardButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoGenerateIDsCheckBox;
    private javax.swing.JCheckBox autoOCRValueDetectionCheckBox;
    private javax.swing.JCheckBox autoSaveImageDataCheckBox;
    private javax.swing.JCheckBox autoSaveOCRDataCheckBox;
    private javax.swing.JButton discardButton;
    private javax.swing.JSeparator fieldOrderSeparator;
    private javax.swing.JTabbedPane fieldOrderTabbedPane;
    private javax.swing.JLabel fieldOrderTabbedPaneLabel;
    private javax.swing.JCheckBox rememberTrimWhitespaceCheckBox;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
