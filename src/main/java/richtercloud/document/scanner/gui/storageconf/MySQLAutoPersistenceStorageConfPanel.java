/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package richtercloud.document.scanner.gui.storageconf;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFilePermissions;
import java.util.concurrent.ExecutionException;
import java.util.zip.GZIPInputStream;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import richtercloud.document.scanner.gui.DocumentScanner;
import richtercloud.document.scanner.gui.conf.DocumentScannerConf;
import richtercloud.message.handler.Message;
import richtercloud.message.handler.MessageHandler;
import richtercloud.reflection.form.builder.jpa.storage.MySQLAutoPersistenceStorageConf;
import richtercloud.swing.worker.get.wait.dialog.SwingWorkerGetWaitDialog;

/**
 *
 * @author richter
 */
public class MySQLAutoPersistenceStorageConfPanel extends StorageConfPanel<MySQLAutoPersistenceStorageConf> {
    private static final long serialVersionUID = 1L;
    private final static Logger LOGGER = LoggerFactory.getLogger(MySQLAutoPersistenceStorageConfPanel.class);
    public final static String DOWNLOAD_URL = "http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.16-linux-glibc2.5-x86_64.tar.gz";
    private final MySQLAutoPersistenceStorageConf storageConf;
    private final MessageHandler messageHandler;
    /**
     * The target of the MySQL download. Doesn't need to be exposed to the user.
     */
    private final static String MYSQL_DOWNLOAD_TARGET = new File(DocumentScannerConf.CONFIG_DIR_DEFAULT, "mysql-5.7.16-linux-glibc2.5-x86_64.tar.gz").getAbsolutePath();
    private final static String MYSQL_EXTRACTION_TARGET = new File(DocumentScannerConf.CONFIG_DIR_DEFAULT, "mysql-5.7.16-linux-glibc2.5-x86_64").getAbsolutePath();
    private final static String MD5_SUM_DEFAULT = "48c96aac2565f7145ff4dcaabdfce2a3";
    private final boolean skipMD5SumCheck;

    public MySQLAutoPersistenceStorageConfPanel(MySQLAutoPersistenceStorageConf storageConf,
            MessageHandler messageHandler,
            boolean skipMD5SumCheck) {
        initComponents();
        this.storageConf = storageConf;
        this.messageHandler = messageHandler;
        this.skipMD5SumCheck = skipMD5SumCheck;
        this.baseDirTextField.setText(storageConf.getBaseDir());
        this.databaseNameTextField.setText(storageConf.getDatabaseName());
        this.databaseDirTextField.setText(storageConf.getDatabaseDir());
        this.hostnameTextField.setText(storageConf.getHostname());
        this.portSpinner.setValue(storageConf.getPort());
        this.usernameTextField.setText(storageConf.getUsername());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        passwordLabel = new javax.swing.JLabel();
        passwordPasswordField = new javax.swing.JPasswordField();
        portSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        databaseDirTextField = new javax.swing.JTextField();
        databaseDirTextFieldLabel = new javax.swing.JLabel();
        hostnameTextField = new javax.swing.JTextField();
        hostnameTextFieldLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        usernameLabel = new javax.swing.JLabel();
        baseDirTextField = new javax.swing.JTextField();
        baseDirTextFieldLabel = new javax.swing.JLabel();
        databaseNameTextField = new javax.swing.JTextField();
        databaseNameTextFieldLabel = new javax.swing.JLabel();
        downloadButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        passwordLabel.setText("Password");

        passwordPasswordField.setText("jPasswordField1");

        jLabel1.setText("Port");

        databaseDirTextFieldLabel.setText("Database directory");

        hostnameTextFieldLabel.setText("Hostname");

        usernameLabel.setText("Username");

        baseDirTextFieldLabel.setText("Base directory");

        databaseNameTextFieldLabel.setText("Database name");

        downloadButton.setText("Download");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(databaseDirTextFieldLabel)
                            .addComponent(hostnameTextFieldLabel)
                            .addComponent(jLabel1)
                            .addComponent(usernameLabel)
                            .addComponent(passwordLabel)
                            .addComponent(baseDirTextFieldLabel)
                            .addComponent(databaseNameTextFieldLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(databaseNameTextField)
                            .addComponent(baseDirTextField)
                            .addComponent(passwordPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                            .addComponent(usernameTextField)
                            .addComponent(portSpinner)
                            .addComponent(hostnameTextField)
                            .addComponent(databaseDirTextField)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(downloadButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(baseDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(baseDirTextFieldLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(databaseNameTextFieldLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(databaseDirTextFieldLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hostnameTextFieldLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        String downloadURL = DOWNLOAD_URL;
        String extractionLocation = MYSQL_EXTRACTION_TARGET;
        String md5Sum = MD5_SUM_DEFAULT;
        while(!mySQLDownload(downloadURL,
                extractionLocation,
                md5Sum)) {
            MySQLDownloadDialog mySQLDownloadDialog = new MySQLDownloadDialog(SwingUtilities.getWindowAncestor(this));
            mySQLDownloadDialog.setLocationRelativeTo(this);
            mySQLDownloadDialog.setVisible(true);
            if(mySQLDownloadDialog.isCanceled()) {
                return;
            }
            downloadURL = mySQLDownloadDialog.getDownloadURL();
            extractionLocation = mySQLDownloadDialog.getExtractionLocation();
            md5Sum = mySQLDownloadDialog.getMd5Sum();
        }
        baseDirTextField.setText(extractionLocation);
            //not necessary to set on storageConf because it'll be set in save
    }//GEN-LAST:event_downloadButtonActionPerformed

    /**
     * One step in a MySQL download loop.
     * @param downloadURL
     * @param extractionDir the directory where the directory contained in the
     * MySQL tarball ought to be placed
     * @param md5Sum
     * @return {@code true} if the validation, download and extraction were
     * successful, {@code false} otherwise
     */
    private boolean mySQLDownload(String downloadURL,
            String extractionDir,
            String md5Sum) {
        final SwingWorkerGetWaitDialog dialog = new SwingWorkerGetWaitDialog(JOptionPane.getFrameForComponent(this),
                DocumentScanner.generateApplicationWindowTitle("Downloading MySQL",
                        DocumentScanner.APP_NAME,
                        DocumentScanner.APP_VERSION),
                "Downloading MySQL",
                "Downloading MySQL");
        SwingWorker<Boolean, Void> downloadWorker = new SwingWorker<Boolean, Void>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                try {
                    boolean needDownload;
                    if(skipMD5SumCheck) {
                        needDownload = !new File(MYSQL_DOWNLOAD_TARGET).exists();
                    }else {
                        needDownload = true;
                        if(!md5Sum.isEmpty() && new File(MYSQL_DOWNLOAD_TARGET).exists()) {
                            LOGGER.debug(String.format("reading download file '%s' for MD5 sum calculation", MYSQL_DOWNLOAD_TARGET));
                            String md5 = DigestUtils.md5Hex(new FileInputStream(MYSQL_DOWNLOAD_TARGET));
                            if(md5Sum.equals(md5)) {
                                LOGGER.debug(String.format("MD5 sum %s of download file '%s' matches", md5Sum, MYSQL_DOWNLOAD_TARGET));
                                needDownload = false;
                            }else {
                                LOGGER.debug(String.format("MD5 sum %s of download file '%s' doesn't match (should be %s), requesting new download", md5, MYSQL_DOWNLOAD_TARGET, md5Sum));
                            }
                        }
                    }
                    if(dialog.isCanceled()) {
                        return false;
                    }
                    if(needDownload) {
                        URL downloadURLURL = new URL(downloadURL);
                        FileOutputStream out =
                                new FileOutputStream(MYSQL_DOWNLOAD_TARGET);
                        IOUtils.copy(downloadURLURL.openStream(),
                                out);
                        if(dialog.isCanceled()) {
                            return false;
                        }
                        if(!md5Sum.isEmpty()) {
                            String md5 = DigestUtils.md5Hex(new FileInputStream(MYSQL_DOWNLOAD_TARGET));
                            if(!md5Sum.equals(md5)) {
                                messageHandler.handle(new Message("MD5 sum %s of download '%s' doesn't match the specified MD5 sum %s. This indicates an incomplete download, a wrong specified MD5 sum.",
                                        JOptionPane.ERROR_MESSAGE,
                                        "MD5 sum verification failed"));
                                //@TODO: ask user for file deletion, retry, etc.
                            }
                        }
                    }
                    if(dialog.isCanceled()) {
                        return false;
                    }
                    if(!new File(extractionDir).exists()) {
                        FileInputStream fileInputStream = new FileInputStream(MYSQL_DOWNLOAD_TARGET);
                        GZIPInputStream gZIPInputStream = new GZIPInputStream(fileInputStream);
                        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(gZIPInputStream);
                        String extractionDirTar = new File(extractionDir).getParent();
                        LOGGER.debug(String.format("extracting into '%s'", extractionDirTar));
                        TarArchiveEntry entry = null;
                        while ((entry = (TarArchiveEntry)tarArchiveInputStream.getNextEntry()) != null) {
                            final File outputFile = new File(extractionDirTar, entry.getName());
                            if (entry.isDirectory()) {
                                LOGGER.trace(String.format("Attempting to write output directory %s.", outputFile.getAbsolutePath()));
                                if (!outputFile.exists()) {
                                    LOGGER.trace(String.format("Attempting to create output directory %s.", outputFile.getAbsolutePath()));
                                    if (!outputFile.mkdirs()) {
                                        throw new IllegalStateException(String.format("Couldn't create directory %s.", outputFile.getAbsolutePath()));
                                    }
                                }
                            } else {
                                LOGGER.trace(String.format("Creating output file %s.", outputFile.getAbsolutePath()));
                                final File outputFileParent = outputFile.getParentFile();
                                if (!outputFileParent.exists()) {
                                    if(!outputFileParent.mkdirs()) {
                                        throw new IOException(String.format("Couldn't create directory %s.", outputFileParent.getAbsolutePath()));
                                    }
                                }
                                final OutputStream outputFileStream = new FileOutputStream(outputFile);
                                IOUtils.copy(tarArchiveInputStream, outputFileStream);
                                outputFileStream.close();
                            }
                            //not the most efficient way, but certainly a
                            //comprehensive one
                            int modeOctal = Integer.parseInt(Integer.toOctalString(entry.getMode()));
                            Path outputFilePath = Paths.get(outputFile.getAbsolutePath());
                            StringBuilder permStringBuilder = new StringBuilder(9);
                            int modeUser = modeOctal / 100;
                            int modeGroup = (modeOctal % 100) / 10;
                            int modeOthers = modeOctal % 10;
                            //from http://stackoverflow.com/questions/34234598/how-to-convert-an-input-of-3-octal-numbers-into-chmod-permissions-into-binary
                            permStringBuilder.append((modeUser & 4) == 0 ? '-' : 'r');
                            permStringBuilder.append((modeUser & 2) == 0 ? '-' : 'w');
                            permStringBuilder.append((modeUser & 1) == 0 ? '-' : 'x');
                            permStringBuilder.append((modeGroup & 4) == 0 ? '-' : 'r');
                            permStringBuilder.append((modeGroup & 2) == 0 ? '-' : 'w');
                            permStringBuilder.append((modeGroup & 1) == 0 ? '-' : 'x');
                            permStringBuilder.append((modeOthers & 4) == 0 ? '-' : 'r');
                            permStringBuilder.append((modeOthers & 2) == 0 ? '-' : 'w');
                            permStringBuilder.append((modeOthers & 1) == 0 ? '-' : 'x');
                            String permString = permStringBuilder.toString();
                            Files.setPosixFilePermissions(outputFilePath, PosixFilePermissions.fromString(permString));
                        }
                        tarArchiveInputStream.close();
                    }else {
                        if(!new File(extractionDir).isDirectory()) {
                            messageHandler.handle(new Message(String.format("extraction directory '%s' exists, but is not a directory", extractionDir),
                                    JOptionPane.ERROR_MESSAGE,
                                    "Invalid extraction target"));
                            return false;
                        }
                    }
                } catch(IOException ex) {
                    LOGGER.error("unexpected exception, see nested exception for details", ex);
                    messageHandler.handle(new Message(ex, JOptionPane.ERROR_MESSAGE));
                    return false;
                }
                return true;
            }

            @Override
            protected void done() {
                dialog.setVisible(false);
            }
        };
        downloadWorker.execute();
        dialog.setVisible(true);
        if(dialog.isCanceled()) {
            return false;
                //returning false here will result in another
                //MySQLDownloadDialog being displayed in which the whole
                //download action can be canceled
        }
        try {
            return downloadWorker.get();
        } catch (InterruptedException | ExecutionException ex) {
            throw new RuntimeException(ex);
        }
    }

    @Override
    public MySQLAutoPersistenceStorageConf getStorageConf() {
        return storageConf;
    }

    @Override
    public void save() {
        this.storageConf.setBaseDir(baseDirTextField.getText());
        this.storageConf.setDatabaseName(this.databaseNameTextField.getText());
        this.storageConf.setDatabaseDir(this.databaseDirTextField.getText());
        this.storageConf.setHostname(this.hostnameTextField.getText());
        this.storageConf.setPort((int) this.portSpinner.getValue());
        String username = this.usernameTextField.getText();
        this.storageConf.setUsername(username);
        String password = new String(this.passwordPasswordField.getPassword());
        this.storageConf.setPassword(password);
    }

    @Override
    public void cancel() {
        //do nothing
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField baseDirTextField;
    private javax.swing.JLabel baseDirTextFieldLabel;
    private javax.swing.JTextField databaseDirTextField;
    private javax.swing.JLabel databaseDirTextFieldLabel;
    private javax.swing.JTextField databaseNameTextField;
    private javax.swing.JLabel databaseNameTextFieldLabel;
    private javax.swing.JButton downloadButton;
    private javax.swing.JTextField hostnameTextField;
    private javax.swing.JLabel hostnameTextFieldLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordPasswordField;
    private javax.swing.JSpinner portSpinner;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
